openapi: 3.0.1
info:
  title: IOT-Inspector-Server
  version: 1.0.0
servers:
- url: /
paths:
  /:
    get:
      operationId: home
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
          description: 200 response
      summary: displays consent page
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /clients:
    get:
      operationId: clients
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/client'
                type: array
          description: Acknowledgement.
      summary: List all connected clients and if they are free for computation.
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /generate_user_key:
    get:
      operationId: generate_user_key
      responses:
        "200":
          content:
            text/html:
              examples:
                text/html:
                  value: <html><head></head><body>123abc456def7890----------------</body></html>
          description: The generated key.
      summary: Generate a new user key.
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /heartbeat/{user_key}:
    post:
      operationId: heart_beat
      parameters:
      - description: the current user's key
        explode: false
        in: path
        name: user_key
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
          description: Acknowledgement.
      summary: send a heartbeat to the server to let it know we are connected.
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /model:
    get:
      operationId: get_model
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: Pickle serialized pytorch model.
      summary: |
        Return the latest version of the model.
      x-openapi-router-controller: openapi_server.controllers.default_controller
    post:
      operationId: submit_model
      requestBody:
        content:
          application/octet-stream:
            schema:
              format: binary
              type: string
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
          description: 200 response
      summary: |
        Clients send updated model.
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /partner:
    get:
      operationId: partner
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/partner'
          description: Acknowledgement.
      summary: Ask the server for a partner to compute with.
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /separate:
    get:
      operationId: separate
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
          description: Acknowledgement.
      summary: |
        Tell the server you have disconnected from your partner. A client should send this after a secure computation is complete.
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /submit_data/{user_key}:
    post:
      operationId: submit_data
      parameters:
      - description: the current user's key
        explode: false
        in: path
        name: user_key
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/upload'
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
          description: 200 response
        "400":
          description: Bad request
      summary: Upload data to the backend.
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /submit_fingerprint/{user_key}:
    post:
      operationId: submit_fingerprint
      parameters:
      - description: the current user's key
        explode: false
        in: path
        name: user_key
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/fingerprint'
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
          description: 200 response
        "400":
          description: Bad request
      summary: Upload device fingerprints to the backend.
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /submit_utc_offset/{user_key}/{offset_seconds}:
    get:
      operationId: submit_utc_offset
      parameters:
      - description: the current user's key
        explode: false
        in: path
        name: user_key
        required: true
        schema:
          type: string
        style: simple
      - description: The user's utc offset in seconds.
        explode: false
        in: path
        name: offset_seconds
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            text/html:
              examples:
                success:
                  value: SUCCESS
                failure:
                  value: 'ERROR: Invalid offset_seconds.'
          description: All responses are 200
      summary: Send client's timezone to the server.
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /user/{user_key}:
    get:
      operationId: user_user_key
      parameters:
      - description: the current user's key
        explode: false
        in: path
        name: user_key
        required: true
        schema:
          type: string
        style: simple
      responses:
        "302":
          description: Redirects to dashboard
          headers:
            Set-Cookie:
              description: Session cookie
              explode: false
              schema:
                example: user_key=123abc456def7890; Path=/
                type: string
              style: simple
            "\0Set-Cookie":
              description: Session cookie
              explode: false
              schema:
                example: persistent_mode=yes; Path=
                type: string
              style: simple
      summary: na
      x-openapi-router-controller: openapi_server.controllers.default_controller
components:
  schemas:
    upload:
      properties:
        client_status_text:
          title: client_status_text
          type: string
        dns_dict:
          title: dns_dict
          type: string
        syn_scan_dict:
          title: syn_scan_dict
          type: string
        flow_dict:
          title: flow_dict
          type: string
        device_dict:
          title: device_dict
          type: string
        ua_dict:
          title: ua_dict
          type: string
        dhcp_dict:
          title: dhcp_dict
          type: string
        resolver_dict:
          title: resolver_dict
          type: string
        client_version:
          title: client_version
          type: string
        tls_dict_list:
          title: tls_dict_list
          type: string
        netdisco_dict:
          title: netdisco_dict
          type: string
        duration:
          title: duration
          type: string
        client_ts:
          title: client_ts
          type: string
      title: upload
      type: object
    fingerprint:
      properties:
        name:
          title: name
          type: string
        fingerprint:
          items:
            type: number
          title: fingerprint
          type: array
      title: fingerprint
      type: object
    partner:
      example:
        address: address
        user_key: s34929a6a8d
        success: true
      properties:
        success:
          title: success
          type: boolean
        address:
          title: address
          type: string
        user_key:
          title: user_key
          type: string
      title: partner
      type: object
    client:
      example:
        address: address
        haspartner: true
        timeout: 0
      properties:
        address:
          title: address
          type: string
        user_key:
          title: user_key
          type: string
        haspartner:
          title: haspartner
          type: boolean
        timeout:
          title: timeout
          type: integer
      title: client
      type: object
