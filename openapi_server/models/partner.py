# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Partner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, success=None, address=None, user_key=None):  # noqa: E501
        """Partner - a model defined in OpenAPI

        :param success: The success of this Partner.  # noqa: E501
        :type success: bool
        :param address: The address of this Partner.  # noqa: E501
        :type address: str
        :param user_key: The user_key of this Partner.  # noqa: E501
        :type user_key: str
        """
        self.openapi_types = {
            'success': bool,
            'address': str,
            'user_key': str
        }

        self.attribute_map = {
            'success': 'success',
            'address': 'address',
            'user_key': 'user_key'
        }

        self._success = success
        self._address = address
        self._user_key = user_key

    @classmethod
    def from_dict(cls, dikt) -> 'Partner':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The partner of this Partner.  # noqa: E501
        :rtype: Partner
        """
        return util.deserialize_model(dikt, cls)

    @property
    def success(self):
        """Gets the success of this Partner.


        :return: The success of this Partner.
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this Partner.


        :param success: The success of this Partner.
        :type success: bool
        """

        self._success = success

    @property
    def address(self):
        """Gets the address of this Partner.


        :return: The address of this Partner.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Partner.


        :param address: The address of this Partner.
        :type address: str
        """

        self._address = address

    @property
    def user_key(self):
        """Gets the user_key of this Partner.


        :return: The user_key of this Partner.
        :rtype: str
        """
        return self._user_key

    @user_key.setter
    def user_key(self, user_key):
        """Sets the user_key of this Partner.


        :param user_key: The user_key of this Partner.
        :type user_key: str
        """

        self._user_key = user_key
