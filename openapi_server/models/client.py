# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Client(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address=None, haspartner=None, timeout=None):  # noqa: E501
        """Client - a model defined in OpenAPI

        :param address: The address of this Client.  # noqa: E501
        :type address: str
        :param haspartner: The haspartner of this Client.  # noqa: E501
        :type haspartner: bool
        :param timeout: The timeout of this Client.  # noqa: E501
        :type timeout: int
        """
        self.openapi_types = {
            'address': str,
            'haspartner': bool,
            'timeout': int
        }

        self.attribute_map = {
            'address': 'address',
            'haspartner': 'haspartner',
            'timeout': 'timeout'
        }

        self._address = address
        self._haspartner = haspartner
        self._timeout = timeout

    @classmethod
    def from_dict(cls, dikt) -> 'Client':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The client of this Client.  # noqa: E501
        :rtype: Client
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this Client.


        :return: The address of this Client.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Client.


        :param address: The address of this Client.
        :type address: str
        """

        self._address = address

    @property
    def haspartner(self):
        """Gets the haspartner of this Client.


        :return: The haspartner of this Client.
        :rtype: bool
        """
        return self._haspartner

    @haspartner.setter
    def haspartner(self, haspartner):
        """Sets the haspartner of this Client.


        :param haspartner: The haspartner of this Client.
        :type haspartner: bool
        """

        self._haspartner = haspartner

    @property
    def timeout(self):
        """Gets the timeout of this Client.


        :return: The timeout of this Client.
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this Client.


        :param timeout: The timeout of this Client.
        :type timeout: int
        """

        self._timeout = timeout
